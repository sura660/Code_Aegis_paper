#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

////====================================================================================
typedef  uint8_t   byte;
typedef  uint8_t   u8;
typedef  uint16_t  u16;
typedef  uint32_t  u32;
typedef  uint64_t  u64;
typedef unsigned long long ull;

//// Necessarey Functions ==============================================================

// Galois Field Multiplication of bytes a and b
byte g(byte a, byte b){
    byte p = 0, counter;
    byte hi_bit_set;

    for(counter = 0; counter < 8; counter++){
        if(b & 1) p ^= a;
        hi_bit_set = a & 0x80;
        a <<= 1;
        a &= 0xFF; // keep a 8 bit
        if(hi_bit_set) a ^= 0x1b;
        b >>= 1;
    }

    return p;
}


void printSubKey(byte subkey[16], u8 round){
    u8 i, j;
    printf("\nRound %u Subkey:\n", round);
    for(i = 0; i < 4; i++){
        for(j = 0; j < 4; j++)
            printf("%02x ", subkey[4*j + i]);
        printf("\n");
    }
}

void printState(byte state[16], char *note){
    u8 i, j;
    printf("\n%s:\n", note);
    for(i = 0; i < 4; i++){
        for(j = 0; j < 4; j++)
            printf("%02x ", state[4*j + i]);
        printf("\n");
    }
}


//// AES Constants =====================================================================
const byte sbox[256] = {
    //0     1     2      3     4    5     6     7      8    9     A      B    C     D     E     F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, //0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, //1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, //2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, //3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, //4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, //5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, //6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, //7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, //8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, //9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, //A
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, //B
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, //C
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, //D
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, //E
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16  //F
    }; 

const byte invsbox[256] = {
    //0     1     2      3     4    5     6     7      8    9     A      B    C     D     E     F
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, //0
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, //1
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, //2
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, //3
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, //4
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, //5
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, //6
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, //7
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, //8
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, //9
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, //A
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, //B
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, //C
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, //D
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, //E
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d  //F
    };  
      
const byte rcon[11] = {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36}; //rcon[0] is a dummy value.

//// Key Schedule ======================================================================
void nextRoundKey(u8 currentRound, byte roundKey[16], byte nextRoundKey[16]){
    u8 i;

    nextRoundKey[0] = sbox[roundKey[13]] ^ roundKey[0] ^ rcon[currentRound + 1] ;
    nextRoundKey[1] = sbox[roundKey[14]] ^ roundKey[1] ;
    nextRoundKey[2] = sbox[roundKey[15]] ^ roundKey[2] ;
    nextRoundKey[3] = sbox[roundKey[12]] ^ roundKey[3] ;
    
    for(i = 1; i < 4; i++){
        nextRoundKey[4*i+0] = roundKey[4*i+0] ^ nextRoundKey[4*(i-1)+0];
        nextRoundKey[4*i+1] = roundKey[4*i+1] ^ nextRoundKey[4*(i-1)+1];
        nextRoundKey[4*i+2] = roundKey[4*i+2] ^ nextRoundKey[4*(i-1)+2];
        nextRoundKey[4*i+3] = roundKey[4*i+3] ^ nextRoundKey[4*(i-1)+3];
    }

}

void genAllRoundKeys(byte masterkey[16], byte subkey[11][16]){
    u8 round, j;
    
    for(j = 0; j < 16; j++) subkey[0][j] = masterkey[j];

    for(round = 1; round < 11; round++){        
        nextRoundKey(round - 1, subkey[round - 1], subkey[round]);
    }

}

//// Encryption ========================================================================
void subBytes(byte state[16]){
    u8 i; 
    for(i = 0; i < 16; i++) state[i] = sbox[state[i]];
}

void shiftRows(byte state[16]){
    u8 i; 
    byte temp[16];

    for(i = 0; i < 16; i++) temp[i] = state[i];

    state[0] = temp[ 0], state[4] = temp[ 4], state[ 8] = temp[ 8], state[12] = temp[12];
    state[1] = temp[ 5], state[5] = temp[ 9], state[ 9] = temp[13], state[13] = temp[ 1];
    state[2] = temp[10], state[6] = temp[14], state[10] = temp[ 2], state[14] = temp[ 6];
    state[3] = temp[15], state[7] = temp[ 3], state[11] = temp[ 7], state[15] = temp[11];
}

void mixColumns(byte state[16]){
    u8 i;
    byte a, b, c, d;
    
    for(i = 0; i < 4; i++){
        a = g(0x02, state[4*i]) ^ g(0x03, state[4*i+1]) ^ g(0x01, state[4*i+2]) ^ g(0x01, state[4*i+3]);
        b = g(0x01, state[4*i]) ^ g(0x02, state[4*i+1]) ^ g(0x03, state[4*i+2]) ^ g(0x01, state[4*i+3]);
        c = g(0x01, state[4*i]) ^ g(0x01, state[4*i+1]) ^ g(0x02, state[4*i+2]) ^ g(0x03, state[4*i+3]);
        d = g(0x03, state[4*i]) ^ g(0x01, state[4*i+1]) ^ g(0x01, state[4*i+2]) ^ g(0x02, state[4*i+3]);
        
        state[4*i] = a, state[4*i+1] = b, state[4*i+2] = c, state[4*i+3] = d;
    }
}


void keyAddition(byte state[16], byte subkey[16]){
    u8 i; 
    for(i = 0; i < 16; i++) state[i] = state[i] ^ subkey[i];
}


void aesRound(byte state[16], byte subkey[16]){
    subBytes(state);
    shiftRows(state);
    mixColumns(state);
    keyAddition(state,subkey);
}


void aes(byte plaintext[16], byte key[16]){
    u8 i;
    byte subkey[11][16];
    byte state[16];

    genAllRoundKeys(key, subkey);

    //for(i = 0; i < 11; i++)
    //    printSubKey(subkey[i], i);
    
    for(i = 0; i < 16; i++) state[i] = plaintext[i];
    
    keyAddition(state, subkey[0]);

    for(i = 1; i < 10; i++){
        aesRound(state, subkey[i]);
    }

    subBytes(state);
    shiftRows(state);
    keyAddition(state, subkey[10]);
   
    
    for(i = 0; i < 16; i++) plaintext[i] = state[i];
    //printf("Babare . . .\n");    
    //printState(ciphertext, "Ciphertext");

}

//// Decryption ========================================================================
void invSubBytes(byte state[16]){
    u8 i; 
    for(i = 0; i < 16; i++) state[i] = invsbox[state[i]];
}

void invShiftRows(byte state[16]){
    u8 i; 
    byte temp[16];

    for(i = 0; i < 16; i++) temp[i] = state[i];

    state[0] = temp[ 0], state[4] = temp[ 4], state[ 8] = temp[ 8], state[12] = temp[12];
    state[1] = temp[13], state[5] = temp[ 1], state[ 9] = temp[ 5], state[13] = temp[ 9];
    state[2] = temp[10], state[6] = temp[14], state[10] = temp[ 2], state[14] = temp[ 6];
    state[3] = temp[ 7], state[7] = temp[11], state[11] = temp[15], state[15] = temp[ 3];
}

void invMixColumns(byte state[16]){
    u8 i;
    byte a, b, c, d;
    
    for(i = 0; i < 4; i++){
        a = g(0x0e, state[4*i]) ^ g(0x0b, state[4*i+1]) ^ g(0x0d, state[4*i+2]) ^ g(0x09, state[4*i+3]);
        b = g(0x09, state[4*i]) ^ g(0x0e, state[4*i+1]) ^ g(0x0b, state[4*i+2]) ^ g(0x0d, state[4*i+3]);
        c = g(0x0d, state[4*i]) ^ g(0x09, state[4*i+1]) ^ g(0x0e, state[4*i+2]) ^ g(0x0b, state[4*i+3]);
        d = g(0x0b, state[4*i]) ^ g(0x0d, state[4*i+1]) ^ g(0x09, state[4*i+2]) ^ g(0x0e, state[4*i+3]);
        
        state[4*i] = a, state[4*i+1] = b, state[4*i+2] = c, state[4*i+3] = d;
    }
}


void invKeyAddition(byte state[16], byte subkey[16]){
    u8 i; 
    for(i = 0; i < 16; i++) state[i] = state[i] ^ subkey[i];
}


void invAesRound(byte state[16], byte subkey[16]){
    invKeyAddition(state,subkey);
    invMixColumns(state);
    invShiftRows(state);
    invSubBytes(state);
}


void invAes(byte plaintext[16], byte key[16], byte ciphertext[16]){
    u8 i;
    byte subkey[11][16];
    byte state[16];

    genAllRoundKeys(key, subkey);

    //for(i = 0; i < 11; i++)
    //    printSubKey(subkey[i], i);
    
    for(i = 0; i < 16; i++) state[i] = ciphertext[i];

    invKeyAddition(state, subkey[10]);
    invShiftRows(state);
    invSubBytes(state);

    for(i = 9; i > 0; i--){
       invAesRound(state, subkey[i]);
    }
    
    invKeyAddition(state, subkey[0]);
    
    for(i = 0; i < 16; i++) plaintext[i] = state[i];
}


